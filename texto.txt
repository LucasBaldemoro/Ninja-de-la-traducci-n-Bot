const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');
const ffmpeg = require('fluent-ffmpeg');
const ffmpegPath = require('ffmpeg-static');

ffmpeg.setFfmpegPath(ffmpegPath);

const TELEGRAM_BOT_TOKEN = '7004903040:AAEHv13_9gbLQwVhlcK6FGrkMI09qdL-RGM';
const ASSEMBLYAI_API_KEY = '08f07d485f134c078982c341925d537f';

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

// Convierte .ogg a .mp3
function convertOggToMp3(inputPath, outputPath) {
  return new Promise((resolve, reject) => {
    ffmpeg(inputPath)
      .toFormat('mp3')
      .on('error', reject)
      .on('end', () => resolve(outputPath))
      .save(outputPath);
  });
}

// Sube el archivo a AssemblyAI
async function uploadToAssemblyAI(filePath) {
  const data = fs.readFileSync(filePath);
  const response = await axios.post('https://api.assemblyai.com/v2/upload', data, {
    headers: {
      'authorization': ASSEMBLYAI_API_KEY,
      'content-type': 'application/octet-stream',
    }
  });
  return response.data.upload_url;
}

// Envía para transcribir
async function transcribeAudioAssembly(url) {
  const response = await axios.post('https://api.assemblyai.com/v2/transcript', {
    audio_url: url,
    language_code: 'es'
  }, {
    headers: {
      'authorization': ASSEMBLYAI_API_KEY,
    }
  });
  return response.data.id;
}

// Espera a que termine la transcripción
async function waitForTranscript(id) {
  let status = 'processing';
  while (status === 'queued' || status === 'processing') {
    await new Promise(res => setTimeout(res, 3000));
    const response = await axios.get(`https://api.assemblyai.com/v2/transcript/${id}`, {
      headers: {
        'authorization': ASSEMBLYAI_API_KEY
      }
    });
    status = response.data.status;
    if (status === 'completed') return response.data.text;
    if (status === 'error') throw new Error('Error al transcribir');
  }
}

bot.on('voice', async (msg) => {
  const chatId = msg.chat.id;
  const oggPath = 'voz.ogg';
  const mp3Path = 'voz.mp3';

  try {
    const file = await bot.getFile(msg.voice.file_id);
    const url = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${file.file_path}`;
    const stream = fs.createWriteStream(oggPath);
    const response = await axios({ url, method: 'GET', responseType: 'stream' });
    response.data.pipe(stream);

    await new Promise((resolve, reject) => {
      stream.on('finish', resolve);
      stream.on('error', reject);
    });

    await convertOggToMp3(oggPath, mp3Path);

    await bot.sendMessage(chatId, '🎧 Subiendo y transcribiendo audio...');

    const uploadUrl = await uploadToAssemblyAI(mp3Path);
    const transcriptId = await transcribeAudioAssembly(uploadUrl);
    const text = await waitForTranscript(transcriptId);

    await bot.sendMessage(chatId, `📝 Texto:\n${text}`);

    fs.unlinkSync(oggPath);
    fs.unlinkSync(mp3Path);

  } catch (err) {
    console.error(err);
    await bot.sendMessage(chatId, '❌ Error al transcribir el audio.');
  }
});
